{"version":3,"sources":["hooks/useform.js","components/todo/form.js","components/todo/if.js","components/todo/list.js","hooks/useAjax.js","context/item-completed.js","components/todo/complete.js","components/todo/todo-connected.js","app.js","index.js"],"names":["useForm","props","useState","item","setItem","e","console","log","target","value","name","preventDefault","reset","handleSubmit","items","TodoForm","handleInputChange","onSubmit","placeholder","onChange","defaultValue","type","min","max","If","condition","children","TodoList","flag","setFlag","Card","list","map","className","complete","toString","key","_id","onClick","handleComplete","text","assignee","difficulty","Button","handleDelete","id","document","getElementById","handleEdit","handlerSubmit","useAjax","url","method","a","body","axios","mode","cache","headers","data","JSON","stringify","todoAPI","CompletedItem","React","createContext","IncompleteTasks","apiHandler","myData","setData","toggle","setToggle","state","checked","useEffect","results","filter","val","Provider","CompletedItemsProvider","context","useContext","for","ToDo1","setList","_addItem","due","Date","savedItem","error","message","_toggleComplete","i","listItem","deleteItem","myId","indexOf","myList","splice","editItem","then","catch","length","App","Main","Component","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.8f1d9751.chunk.js","sourcesContent":["\n\nimport { useState } from 'react'; \n\nconst useForm = (props) => {\n    \n \n  const [item, setItem] = useState( {} );\n  \n  const  handleInputChange = e => {\n    console.log(e.target.value,'99999999999')\n     setItem({...item, [e.target.name]: e.target.value } );\n   \n   };\n \n  const handleSubmit = (e) => {\n     e.preventDefault();\n     e.target.reset();\n     props.handleSubmit(item);\n     const items = {};\n     setItem({items});\n   };\n\n   return [handleInputChange, handleSubmit, item];\n   \n   \n}\n\nexport default useForm;\n","\nimport React, { useState, useEffect } from 'react';\nimport {Card, Container,ProgressBar, Col, Row ,Button} from 'react-bootstrap'\nimport useForm from '../../hooks/useform';\n\n\n\nconst TodoForm =(props)=> {\n\n  \n const [ handleInputChange, handleSubmit, item] =  useForm(props)\n\n\n  // const [formData, setFormData] = useState({});\n \n//   const [item, setItem] = useState( {} );\n  \n//  const  handleInputChange = e => {\n//    console.log(e.target.value,'99999999999')\n//     setItem({...item, [e.target.name]: e.target.value } );\n  \n//   };\n\n//  const handleSubmit = (e) => {\n//     e.preventDefault();\n//     e.target.reset();\n//     props.handleSubmit(item);\n//     const items = {};\n//     setItem({items});\n//   };\n\n\n\n\n \n    return (\n      <>\n        <h3>Add Item</h3>\n        {/* <Card> */}\n\n        \n        <form onSubmit={handleSubmit}>\n          <label>\n            <span>To Do Item</span>\n            <input\n              name=\"text\"\n              placeholder=\"Add To Do List Item\"\n              onChange={handleInputChange}\n            />\n          </label>\n          <label>\n            <span>Difficulty Rating</span>\n            <input defaultValue=\"1\" type=\"range\" min=\"1\" max=\"5\" name=\"difficulty\" onChange={handleInputChange} />\n          </label>\n          <label>\n            <span>Assigned To</span>\n            <input type=\"text\" name=\"assignee\" placeholder=\"Assigned To\" onChange={handleInputChange} />\n          </label>\n          <button >Add Item</button>\n        </form>\n        {/* </Card> */}\n      </>\n    );\n  \n}\n\nexport default TodoForm;\n","const If = (props) => {\n    if (props.condition) {\n        // if the flag is true, return the modal (If componant children)\n        return props.children;\n    } else {\n        return null;\n    }\n}\nexport default If;","import { co } from 'co';\n// import React from 'react';\nimport {Card, Container,ProgressBar, Col, Row ,Button} from 'react-bootstrap'\nimport React, { useState, useEffect } from 'react';\nimport If from './if';\n\nfunction TodoList(props)   {\n\n  const [flag, setFlag] = useState(false)\n\n  function handlerSubmit(e, id) {\n    e.preventDefault()\n   let value = document.getElementById(id).value;\n   props.handleEdit(id,value)\n   setFlag(!flag)\n  }  \n\n\n  \n    return (\n      <ul>\n        <Card>\n        {props.list.map(item => (\n          <li\n            className={`complete-${item.complete.toString()}`}\n            key={item._id}\n          >\n            <span onClick={() => props.handleComplete(item._id)}>\n             Item : {item.text}  <br></br>\n              Assignee: {item.assignee}  <br></br>\n               Difficulty: {item.difficulty}  <br></br>\n            </span>\n            {/* <span onClick={() => props.handleComplete(item._id)}>\n              Name: {item.text} <br></br>\n             Assignee: {item.assignee}<br></br>\n             Difficulty: {item.difficulty}\n            </span> */}\n            {/* <button onClick={() => props.handleEdit(item._id)}> edit </button> */}\n           <Button onClick={() => props.handleDelete(item._id)}> X </Button>\n\n\n           <form onSubmit={(e)=>handlerSubmit(e,item._id)}>\n            <Button type='button' onClick={() => setFlag(!flag)}>edit</Button>\n          \n            <If condition={flag}>\n            <Button type='submit' >new edit</Button>\n            <input id={item._id} placeholder={item.text}></input>\n            {/* <textarea id={item._id} required></textarea> */}\n            </If>\n            </form>\n\n \n             \n            \n          </li>\n          \n        ))}\n         </Card>\n      </ul>\n     \n    );\n  \n}\n\nexport default TodoList;\n","import axios from 'axios'; \nimport React, { useEffect, useState } from 'react';\nconst useAjax = () =>{\n\n   const apiHandler= async (url,method, body=null)=>{\n\n\n  \n    return await  axios({\n                method: method,\n                url: url,\n                mode: 'cors',\n                cache: 'no-cache',\n                headers: { 'Content-Type': 'application/json' },\n                data: JSON.stringify(body),\n              })\n  }\n  return [apiHandler]\n\n}\n//  const [list, setList] = useState([]);\n\n//  const _addItem = (item) => {\n//    item.due = new Date();\n//    // fetch(todoAPI, {\n//    //   method: 'post',\n//    //   mode: 'cors',\n//    //   cache: 'no-cache',\n//    //   headers: { 'Content-Type': 'application/json' },\n//    //   body: JSON.stringify(item)\n//    // })\n//    //   .then(response => response.json())\n//    //   .then(savedItem => {\n//    //     setList([...list, savedItem])\n//    //   })\n//    axios({\n//      method: 'post',\n//      url: api,\n//      mode: 'cors',\n//      cache: 'no-cache',\n//      headers: { 'Content-Type': 'application/json' },\n//      data: JSON.stringify(item),\n//    })\n//    .then(savedItem => {\n//      setList([...list, savedItem.data])\n//    })\n//      .catch(console.error);\n//  };\n\n//  const _toggleComplete = id => {\n\n//    let item = list.filter(i => i._id === id)[0] || {};\n\n//    if (item._id) {\n\n//      item.complete = !item.complete;\n\n//      let url = `${api}/${id}`;\n\n//      // fetch(url, {\n//      //   method: 'put',\n//      //   mode: 'cors',\n//      //   cache: 'no-cache',\n//      //   headers: { 'Content-Type': 'application/json' },\n//      //   body: JSON.stringify(item)\n//      // })\n//      //   .then(response => response.json())\n//      //   .then(savedItem => {\n//      //     setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n//      //   })\n//      axios({\n//        method: 'put',\n//        url: url,\n//        mode: 'cors',\n//        cache: 'no-cache',\n//        headers: { 'Content-Type': 'application/json' },\n//        data: JSON.stringify(item),\n//      })\n//      // .then(response => response.json())\n//        .then(savedItem => {\n//          setList(list.map(listItem => listItem._id === item._id ? savedItem.data: listItem));\n//        })\n//        .catch(console.error);\n//    }\n//  };\n\n\n\n//  const _getTodoItems = () => {\n//    // fetch(todoAPI, {\n//    //   method: 'get',\n//    //   mode: 'cors',\n//    // })\n//    axios({\n//      method: 'get',\n//      url: api,\n//      // data: body !=='' ? JSON.parse(body) :body = {},                    \n    \n     \n//      })\n    \n//      // .then(data =>  data.json())\n//      .then(data => setList(data.data.results) )\n//      .catch(console.error);\n//  };\n\n//  const deleteItem = id => {\n//    let item = list.filter(i => i._id === id)[0] || {};\n\n//    if (item._id) {\n\n//      item.complete = !item.complete;\n\n//      let url = `${api}/${id}`;\n\n//      // fetch(url, {\n//      //   method: 'delete',\n//      //   mode: 'cors',\n//      //   cache: 'no-cache',\n//      //   headers: { 'Content-Type': 'application/json' },\n//      //   body: JSON.stringify(item)\n//      // })\n//      axios({\n//        method: 'delete',\n//        url: url,\n//        mode: 'cors',\n//        cache: 'no-cache',\n//        headers: { 'Content-Type': 'application/json' },\n//        data: JSON.stringify(item),\n//      })\n//        // .then(response => response.json())\n//        .then(data => {\n//          console.log(data,'ssssssssssss')\n//          // setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n\n//          let myId = list.indexOf(item)\n//        console.log('ahmad')\n//         console.log(list,'33333')\n//          let myList = [...list]\n//          myList.splice(myId, 1);\n//          console.log(list,\"jj\")\n//          setList(myList);\n//        })\n//        // .catch(console.error);\n       \n//    }\n//  }\n\n//  const editItem = (id,value)=> {\n//    let item = list.filter(i => i._id === id)[0] || {};\n\n//    if (item._id) {\n\n//      item.text = value;\n\n//      item.complete = !item.complete;\n\n//      let url = `${api}/${id}`;\n\n//      // fetch(url, {\n//      //   method: 'put',\n//      //   mode: 'cors',\n//      //   cache: 'no-cache',\n//      //   headers: { 'Content-Type': 'application/json' },\n//      //   body: JSON.stringify(item)\n//      // })\n//      //   .then(response => response.json())\n//      //   .then(savedItem => {\n//      //     setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n//      //   })\n//      axios({\n//        method: 'put',\n//        url: url,\n//        mode: 'cors',\n//        cache: 'no-cache',\n//        headers: { 'Content-Type': 'application/json' },\n//        data: JSON.stringify(item),\n//      })\n//      .then(response => response.json())\n//        .then(savedItem => {\n//          setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n//        })\n//      // .then(savedItem => {\n//      //   setList([...list, savedItem.data])\n//      // })\n//      // .then(savedItem => {\n//      //       setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n//      //     })\n//        .catch(console.error);\n//    }\n\n//  }\n//  useEffect(_getTodoItems, []); \n//  return [list, _addItem,_toggleComplete,_getTodoItems,deleteItem,editItem] ;\n\n// }\n\nexport default useAjax ;\n\n\n\n","import React, { useEffect, useState } from 'react';\nimport useAjax from '../hooks/useAjax';\n\n\nconst todoAPI = \"https://api-js401.herokuapp.com/api/v1/todo\";\n\nexport const CompletedItem = React.createContext();\n\nconst IncompleteTasks = (props) =>{\n\n    \n    let [apiHandler] = useAjax();\n\n\n    let  toggleMode = () => {\n        setToggle( state.checked === false ? true : false )\n    };\n\n\n     const [myData, setData] = useState([]);\n     const [toggle, setToggle] = useState(false)\n    \n\n    let state = {\n        checked: toggle, \n        data: myData,\n        toggle: toggleMode\n    }\n \n    useEffect( ()=>{\n        (async ()=> {\n           \n            let results = await apiHandler(todoAPI, 'get')\n            let list = results.data.results.filter(val => val.complete === false);\n            console.log( results.data.results,'5555555555');\n            if(state.checked === false){\n               \n                setData(list)\n                \n            }\n             else if(state.checked === true) {\n                let results = await apiHandler(todoAPI, 'get')\n                let list = results.data.results.filter(val => val.complete === true);\n                // setData(results.data.results)\n                setData(list)\n            }\n        })();\n}, [state.checked])\n        \n\n    \n\n    return(\n        <CompletedItem.Provider value={state}>\n           \n           {props.children}\n        </CompletedItem.Provider>\n    )\n}\n\nexport default IncompleteTasks;\n\n\n\n\n","import React, { useContext } from 'react';\nimport {CompletedItem}  from '../../context/item-completed';\n\nconst CompletedItemsProvider = (props) => {\n\n    const context = useContext(CompletedItem)\n\n    return (\n        <>\n           \n            {/* { console.log(\"🚀 ~ file: completed-settings.jsx ~ line 7 ~ CompletedTasksProvider ~ context\", context)} */}\n            <input type=\"checkbox\" name=\"completed\" id=\"completed\" checked={context.checked} onChange={context.toggle}></input>\n            <label for=\"completed\">Show Completed Task</label>\n        </>\n    \n    )\n    \n}\n\nexport default CompletedItemsProvider;\n","import React, { useEffect, useState, useContext} from 'react';\nimport TodoForm from './form.js';\nimport TodoList from './list.js';\n// import axios from 'axios'; \n\nimport useAjax from '../../hooks/useAjax';\n\nimport  {CompletedItem}  from '../../context/item-completed';\nimport CompletedSettings from './complete'\n\nimport './todo.scss';\n\nconst todoAPI = 'https://api-js401.herokuapp.com/api/v1/todo';\n\n\n\nconst ToDo1 = () => {\n\n  const context = useContext(CompletedItem)\n\n  // const [list, _addItem,_toggleComplete,_getTodoItems,deleteItem,editItem] = useAjax(todoAPI)\n  let [apiHandler] = useAjax();\n  const [list, setList] = useState([]);\n  \n  const  _addItem =  async (item) => {\n    item.due = new Date();\n    // fetch(todoAPI, {\n    //   method: 'post',\n    //   mode: 'cors',\n    //   cache: 'no-cache',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(item)\n    // })\n    //   .then(response => response.json())\n    //   .then(savedItem => {\n    //     setList([...list, savedItem])\n    //   })\n    // axios({\n    //   method: 'post',\n    //   url: todoAPI,\n    //   mode: 'cors',\n    //   cache: 'no-cache',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   data: JSON.stringify(item),\n    // })\n\n    try {\n      let savedItem = await apiHandler(todoAPI, \"post\", item);\n      setList([...list, savedItem.data]);\n    } catch (error) {\n      console.error(error.message);\n    }\n    // .then(savedItem => {\n    //   setList([...list, savedItem.data])\n    // })\n    //   .catch(console.error);\n  };\n\n  const _toggleComplete =async (id) => {\n\n    let item = list.filter(i => i._id === id)[0] || {};\n\n    if (item._id) {\n\n      item.complete = !item.complete;\n\n      let url = `${todoAPI}/${id}`;\n\n      // fetch(url, {\n      //   method: 'put',\n      //   mode: 'cors',\n      //   cache: 'no-cache',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(item)\n      // })\n      //   .then(response => response.json())\n      //   .then(savedItem => {\n      //     setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n      //   })\n      // axios({\n      //   method: 'put',\n      //   url: url,\n      //   mode: 'cors',\n      //   cache: 'no-cache',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   data: JSON.stringify(item),\n      // })\n      // .then(response => response.json())\n        // .then(savedItem => {\n        //   setList(list.map(listItem => listItem._id === item._id ? savedItem.data: listItem));\n        // })\n        // .catch(console.error);\n        try {\n          let savedItem = await apiHandler(url, \"put\", item);\n          setList(\n            list.map((listItem) =>\n              listItem._id === item._id ? savedItem.data : listItem\n            )\n          );\n        } catch (error) {\n          console.error(error.message);\n        }\n    }\n  };\n\n\n\n  const _getTodoItems = () => {\n    // fetch(todoAPI, {\n    //   method: 'get',\n    //   mode: 'cors',\n    // })\n    // axios({\n    //   method: 'get',\n    //   url: todoAPI,\n    //   // data: body !=='' ? JSON.parse(body) :body = {},                    \n     \n      \n    //   })\n     \n    //   // .then(data =>  data.json())\n    //   .then(data => setList(data.data.results) )\n    //   .catch(console.error);\n\n    /**----------------- */\n\n    // try {\n    //   let myData = await apiHandler(todoAPI, \"get\");\n     \n    //   setList(myData.data.results);\n    // } catch (error) {\n    //   console.error(error.message);\n    // }\n\n    apiHandler(todoAPI, \"get\")\n    .then((results) => {\n      setList( context.data );\n\n    })\n\n    .catch(console.error);\n\n  };\n\n  const deleteItem = async (id) => {\n    let item = list.filter(i => i._id === id)[0] || {};\n\n    if (item._id) {\n\n      item.complete = !item.complete;\n\n      let url = `${todoAPI}/${id}`;\n\n      // fetch(url, {\n      //   method: 'delete',\n      //   mode: 'cors',\n      //   cache: 'no-cache',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(item)\n      // })\n\n      /*---------------------------*/\n      // axios({\n      //   method: 'delete',\n      //   url: url,\n      //   mode: 'cors',\n      //   cache: 'no-cache',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   data: JSON.stringify(item),\n      // })\n      //   // .then(response => response.json())\n      //   .then(data => {\n      //     console.log(data,'ssssssssssss')\n      //     // setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n\n      //     let myId = list.indexOf(item)\n      //   console.log('ahmad')\n      //    console.log(list,'33333')\n      //     let myList = [...list]\n      //     myList.splice(myId, 1);\n      //     console.log(list,\"jj\")\n      //     setList(myList);\n      //   })\n        /*--------------------------------*/\n         try {\n        await apiHandler(url, \"delete\", item);\n        let myId = list.indexOf(item)\n        \n          let myList = [...list]\n          myList.splice(myId, 1);\n        \n          setList(myList);\n      } catch (error) {\n        console.error(error.message);\n      }\n        // .catch(console.error);\n        \n    }\n  }\n\n  const editItem = async (id,value)=> {\n    let item = list.filter(i => i._id === id)[0] || {};\n\n    if (item._id) {\n\n      item.text = value;\n\n      item.complete = !item.complete;\n\n      let url = `${todoAPI}/${id}`;\n\n      // fetch(url, {\n      //   method: 'put',\n      //   mode: 'cors',\n      //   cache: 'no-cache',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(item)\n      // })\n      //   .then(response => response.json())\n      //   .then(savedItem => {\n      //     setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n      //   })\n      /**------------------------------- */\n      // axios({\n      //   method: 'put',\n      //   url: url,\n      //   mode: 'cors',\n      //   cache: 'no-cache',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   data: JSON.stringify(item),\n      // })\n      // .then(response => response.json())\n      //   .then(savedItem => {\n      //     setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n      //   })\n      // // .then(savedItem => {\n      // //   setList([...list, savedItem.data])\n      // // })\n      // // .then(savedItem => {\n      // //       setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n      // //     })\n      //   .catch(console.error);\n      /**------------------------------- */\n\n      apiHandler(url, \"put\", item)\n      .then((savedItem) => {\n        setList(\n          list.map((listItem) =>\n            listItem._id === item._id ? savedItem.data : listItem\n          )\n        );\n      })\n      .catch(console.error);\n  }\n    }\n \n  \n\n  useEffect(_getTodoItems, [context]);\n\n\n  return (\n    <>\n      <header>\n        <h2>\n          There are {list.filter(item => !item.complete).length} Items To Complete\n        </h2>\n      </header>\n\n      <section className=\"todo\">\n\n        <div>\n        <CompletedSettings />\n          <TodoForm handleSubmit={_addItem} />\n        </div>\n\n        <div>\n          <TodoList\n            list={list}\n            handleComplete={_toggleComplete}\n            handleDelete = {deleteItem}\n            handleEdit = {editItem}\n          />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default ToDo1;\n","import React from 'react';\n\n// import ToDo from './components/todo/todo.js';\nimport ToDo1 from './components/todo/todo-connected'\nimport IncompleteTasks from './context/item-completed'\n\nexport default function App()  {\n  \n    return (\n      <IncompleteTasks>\n      <>\n        {/* <ToDo /> */}\n        <ToDo1 />\n      </>\n      </IncompleteTasks>\n    );\n  \n}\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}